{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Paginations';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n\n    // tells apollo we will take care of everything\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      console.log({\n        existing,\n        args,\n        cache\n      });\n      const {\n        skip,\n        first\n      } = args; // read the number of items on the page from the cache\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first); // check if we have existing items\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length !== first) {\n        // we don't have any items, we must go to the network to fetch them\n        return false;\n      } // if there are items, return them from the cache and don't go to network\n\n\n      if (items.length) {\n        console.log(`there are ${items.length} items in the cache, gonna send them to apollo`);\n        return items;\n      }\n\n      return false; // fallback to network\n      // first thing it does is ask the read function for those items\n      // we can either one of two things\n      // first thing we can do is return the items because they are already in the cache\n      // the other thing we can do is to return false from here, (network request)\n    },\n\n    merge(existing, incoming, {\n      args\n    }) {\n      const {\n        skip,\n        first\n      } = args; // this runs when the apollo client comes back from the network with products\n\n      console.log(`merging items from the network ${incoming.length}`);\n      const merged = existing ? existing.slice(0) : [];\n      merged.push(incoming);\n\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/nelsonwfoltz/Desktop/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","push","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,2BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;;AACW;AAChBC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAF;AAAYC,QAAAA,IAAZ;AAAkBC,QAAAA;AAAlB,OAAZ;AACA,YAAM;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CAFmC,CAInC;;AACA,YAAMM,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,YAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARmC,CAUnC;;AACA,YAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0CC,CAAC,IAAIA,CAA/C,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAfkC,CAiBnC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBjB,QAAAA,OAAO,CAACC,GAAR,CACG,aAAYY,KAAK,CAACI,MAAO,gDAD5B;AAGA,eAAOJ,KAAP;AACD;;AACD,aAAO,KAAP,CAxBmC,CAwBrB;AACd;AAEA;AAEA;AAEA;AACD,KAlCI;;AAmCLK,IAAAA,KAAK,CAACrB,QAAD,EAAWsB,QAAX,EAAqB;AAAErB,MAAAA;AAAF,KAArB,EAA+B;AAClC,YAAM;AAAEI,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBL,IAAxB,CADkC,CAElC;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAa,kCAAiCkB,QAAQ,CAACF,MAAO,EAA9D;AACA,YAAMG,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACiB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;AACAM,MAAAA,MAAM,CAACC,IAAP,CAAYF,QAAZ;;AACA,WAAK,IAAIG,CAAC,GAAGpB,IAAb,EAAmBoB,CAAC,GAAGpB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEK,CAAjD,EAAoD;AAClDF,QAAAA,MAAM,CAACE,CAAD,CAAN,GAAYH,QAAQ,CAACG,CAAC,GAAGpB,IAAL,CAApB;AACD;AACF;;AA5CI,GAAP;AA8CD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Paginations';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // tells apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      console.log({ existing, args, cache });\n      const { skip, first } = args;\n\n      // read the number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // check if we have existing items\n      const items = existing.slice(skip, skip + first).filter(x => x);\n      if (items.length !== first) {\n        // we don't have any items, we must go to the network to fetch them\n        return false;\n      }\n\n      // if there are items, return them from the cache and don't go to network\n      if (items.length) {\n        console.log(\n          `there are ${items.length} items in the cache, gonna send them to apollo`,\n        );\n        return items;\n      }\n      return false; // fallback to network\n      // first thing it does is ask the read function for those items\n\n      // we can either one of two things\n\n      // first thing we can do is return the items because they are already in the cache\n\n      // the other thing we can do is to return false from here, (network request)\n    },\n    merge(existing, incoming, { args }) {\n      const { skip, first } = args;\n      // this runs when the apollo client comes back from the network with products\n      console.log(`merging items from the network ${incoming.length}`);\n      const merged = existing ? existing.slice(0) : [];\n      merged.push(incoming);\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Paginations';\nexport default function paginationField() {\n  return {\n    keyArgs: false,\n    // tells apollo we will take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; // read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      }); // if\n      // there are items\n      // and there aren't enough items to satisfy how many were requested\n      // and we are on the last page\n      // then just send it\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // we don't have any items, we must go to the network to fetch them\n        return false;\n      } // if there are items, return them from the cache and don't go to network\n\n\n      if (items.length) {\n        console.log(\"there are \".concat(items.length, \" items in the cache, gonna send them to apollo\"));\n        return items;\n      }\n\n      return false; // fallback to network\n      // first thing it does is ask the read function for those items\n      // we can either one of two things\n      // first thing we can do is return the items because they are already in the cache\n      // the other thing we can do is to return false from here, (network request)\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first; // this runs when the apollo client comes back from the network with products\n\n      console.log(\"merging items from the network \".concat(incoming.length));\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      console.log(merged); // finally we return the merged items from the cache\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/nelsonwfoltz/Desktop/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,2BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AACW;AAChBC,IAAAA,IAFK,kBAEgC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA,IAAZ;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAZ;AADmC,UAE3BG,IAF2B,GAEXJ,IAFW,CAE3BI,IAF2B;AAAA,UAErBC,KAFqB,GAEXL,IAFW,CAErBK,KAFqB,EAInC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEb;AAAT,OAAhB,CAAb;AACA,UAAMc,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd,CARmC,CAUnC;;AACA,UAAMU,KAAK,GAAGhB,QAAQ,CAACiB,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAAAC,CAAC;AAAA,eAAIA,CAAJ;AAAA,OAA3C,CAAd,CAXmC,CAYnC;AACA;AACA;AACA;AACA;;AACA,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,KAAvD,EAA8D;AAC5D,eAAOG,KAAP;AACD;;AACD,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD,OAvBkC,CAyBnC;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB;AAChBjB,QAAAA,OAAO,CAACC,GAAR,qBACeY,KAAK,CAACI,MADrB;AAGA,eAAOJ,KAAP;AACD;;AACD,aAAO,KAAP,CAhCmC,CAgCrB;AACd;AAEA;AAEA;AAEA;AACD,KA1CI;AA2CLK,IAAAA,KA3CK,iBA2CCrB,QA3CD,EA2CWsB,QA3CX,SA2C+B;AAAA,UAARrB,IAAQ,SAARA,IAAQ;AAAA,UAC1BI,IAD0B,GACVJ,IADU,CAC1BI,IAD0B;AAAA,UACpBC,KADoB,GACVL,IADU,CACpBK,KADoB,EAElC;;AACAH,MAAAA,OAAO,CAACC,GAAR,0CAA8CkB,QAAQ,CAACF,MAAvD;AACA,UAAMG,MAAM,GAAGvB,QAAQ,GAAGA,QAAQ,CAACiB,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACD;;AACDF,MAAAA,OAAO,CAACC,GAAR,CAAYmB,MAAZ,EARkC,CASlC;;AACA,aAAOA,MAAP;AACD;AAtDI,GAAP;AAwDD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Paginations';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false, // tells apollo we will take care of everything\n    read(existing = [], { args, cache }) {\n      console.log({ existing, args, cache });\n      const { skip, first } = args;\n\n      // read the number of items on the page from the cache\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      // check if we have existing items\n      const items = existing.slice(skip, skip + first).filter(x => x);\n      // if\n      // there are items\n      // and there aren't enough items to satisfy how many were requested\n      // and we are on the last page\n      // then just send it\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n      if (items.length !== first) {\n        // we don't have any items, we must go to the network to fetch them\n        return false;\n      }\n\n      // if there are items, return them from the cache and don't go to network\n      if (items.length) {\n        console.log(\n          `there are ${items.length} items in the cache, gonna send them to apollo`,\n        );\n        return items;\n      }\n      return false; // fallback to network\n      // first thing it does is ask the read function for those items\n\n      // we can either one of two things\n\n      // first thing we can do is return the items because they are already in the cache\n\n      // the other thing we can do is to return false from here, (network request)\n    },\n    merge(existing, incoming, { args }) {\n      const { skip, first } = args;\n      // this runs when the apollo client comes back from the network with products\n      console.log(`merging items from the network ${incoming.length}`);\n      const merged = existing ? existing.slice(0) : [];\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n      console.log(merged);\n      // finally we return the merged items from the cache\n      return merged;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}